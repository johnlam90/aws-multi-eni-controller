apiVersion: v1
kind: Namespace
metadata:
  name: eni-controller-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eni-controller
  namespace: eni-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eni-controller-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.aws
  resources:
  - nodeenis
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.aws
  resources:
  - nodeenis/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eni-controller-pod-reader
  namespace: eni-controller-system
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eni-controller-sriov-manager
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - delete
  resourceNames: []
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - get
  - list
  - patch
  resourceNames: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eni-controller-pod-reader
  namespace: eni-controller-system
subjects:
- kind: ServiceAccount
  name: eni-controller
  namespace: eni-controller-system
roleRef:
  kind: Role
  name: eni-controller-pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eni-controller-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eni-controller-role
subjects:
- kind: ServiceAccount
  name: eni-controller
  namespace: eni-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eni-controller-sriov-manager-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eni-controller-sriov-manager
subjects:
- kind: ServiceAccount
  name: eni-controller
  namespace: eni-controller-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eni-controller
  namespace: eni-controller-system
  labels:
    app: eni-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eni-controller
  template:
    metadata:
      labels:
        app: eni-controller
    spec:
      serviceAccountName: eni-controller
      # Use the default Kubernetes service
      # hostAliases:
      # - ip: "172.20.0.1"
      #   hostnames:
      #   - "kubernetes.default.svc"
      #   - "kubernetes.default"
      #   - "kubernetes"
      containers:
      - name: manager
        image: johnlam90/aws-multi-eni-controller:v1.3.5
        env:
        - name: COMPONENT
          value: "eni-controller"
        # Users should set this to their preferred AWS region
        # This is a placeholder that should be customized
        - name: AWS_REGION
          value: "us-east-1"
        # AWS SDK configuration for strict IMDSv2 enforcement
        # These settings ensure IMDSv2-only operation for enhanced security
        - name: AWS_EC2_METADATA_DISABLED
          value: "false"
        - name: AWS_EC2_METADATA_V1_DISABLED
          value: "true"
        - name: AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE
          value: "IPv4"
        - name: AWS_EC2_METADATA_SERVICE_ENDPOINT
          value: "http://169.254.169.254"
        # Increased timeout and retry configuration for reliable IMDS calls
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: "30"
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: "5"
        # Maximum number of concurrent ENI cleanup operations
        - name: MAX_CONCURRENT_ENI_CLEANUP
          value: "3"
        # Maximum number of concurrent reconciles
        - name: MAX_CONCURRENT_RECONCILES
          value: "1"
        # Let Kubernetes handle service discovery automatically
        # - name: KUBERNETES_SERVICE_HOST
        #   value: "172.20.0.1"
        # - name: KUBERNETES_SERVICE_PORT
        #   value: "443"
        args:
        - --metrics-addr=:8080
        - --enable-leader-election
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        # Uncomment and use this for EKS clusters to auto-detect the region
        # - name: AWS_REGION
        #   valueFrom:
        #     fieldRef:
        #       fieldPath: metadata.annotations['eks.amazonaws.com/compute-region']
      terminationGracePeriodSeconds: 10
