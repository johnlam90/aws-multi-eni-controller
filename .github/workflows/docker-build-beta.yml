name: Build and Push Beta Docker Image

on:
  push:
    branches:
      - 'sandbox-*'
      - 'beta-*'
      - 'feature-*'
      - 'dev-*'
  # Allow manual triggering with branch input
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to build from'
        required: true
        default: 'sandbox-testv0.1'
      beta_version:
        description: 'Beta version tag (e.g., beta.1)'
        required: true
        default: 'beta.1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-beta:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        env:
          GOTOOLCHAIN: auto

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        id: extract_branch

      - name: Generate beta version
        id: beta_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use the manually provided beta version
            BETA_VERSION="${{ github.event.inputs.beta_version }}"
          else
            # Generate a beta version based on branch name and short SHA
            SHORT_SHA=$(git rev-parse --short HEAD)
            BRANCH_SUFFIX=$(echo ${BRANCH_NAME} | sed 's/[^a-zA-Z0-9]/-/g')
            BETA_VERSION="beta.${BRANCH_SUFFIX}.${SHORT_SHA}"
          fi
          
          echo "BETA_VERSION=${BETA_VERSION}" >> $GITHUB_ENV
          echo "Generated beta version: ${BETA_VERSION}"

      - name: Check Go version in Dockerfile and go.mod
        run: |
          echo "Checking Go version in Dockerfile..."
          GO_VERSION_DOCKERFILE=$(grep "FROM golang:" Dockerfile | head -1 | cut -d':' -f2 | cut -d'-' -f1)
          echo "Go version in Dockerfile: $GO_VERSION_DOCKERFILE"

          echo "Checking Go version in go.mod..."
          GO_VERSION_GOMOD=$(grep "^go " go.mod | awk '{print $2}')
          echo "Go version in go.mod: $GO_VERSION_GOMOD"

          if [[ "$GO_VERSION_DOCKERFILE" != "$GO_VERSION_GOMOD" ]]; then
            echo "Warning: Go version mismatch between Dockerfile ($GO_VERSION_DOCKERFILE) and go.mod ($GO_VERSION_GOMOD)"
          fi

          echo "GOTOOLCHAIN environment variable is set to: $GOTOOLCHAIN"
        env:
          GOTOOLCHAIN: auto

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_PAT || secrets.GH_TOKEN || github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.BETA_VERSION }}
            type=raw,value=beta-${{ env.BRANCH_NAME }}
            type=raw,value=beta-latest
            type=sha,prefix=beta-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
          GOTOOLCHAIN: auto
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GOTOOLCHAIN=auto
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Display image information
        run: |
          echo "::notice::Beta image built and pushed successfully!"
          echo "::notice::Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BETA_VERSION }}"
          echo "::notice::Branch: ${{ env.BRANCH_NAME }}"
          echo "::notice::Commit: ${{ github.sha }}"
          echo "::notice::You can pull this image with: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BETA_VERSION }}"
          
          echo "::notice::All tags pushed:"
          echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '
