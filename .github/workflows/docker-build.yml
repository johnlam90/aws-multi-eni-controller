name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    # Optionally trigger on tags for releases
    tags: [ 'v*' ]
  # Allow manual triggering
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Set this to true to make the package public
  PACKAGE_PUBLIC: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Add additional permissions for package management
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        env:
          GOTOOLCHAIN: auto

      - name: Check Go version in Dockerfile and go.mod
        run: |
          echo "Checking Go version in Dockerfile..."
          GO_VERSION_DOCKERFILE=$(grep "FROM golang:" Dockerfile | head -1 | cut -d':' -f2 | cut -d'-' -f1)
          echo "Go version in Dockerfile: $GO_VERSION_DOCKERFILE"

          echo "Checking Go version in go.mod..."
          GO_VERSION_GOMOD=$(grep "^go " go.mod | awk '{print $2}')
          echo "Go version in go.mod: $GO_VERSION_GOMOD"

          if [[ "$GO_VERSION_DOCKERFILE" != "$GO_VERSION_GOMOD" ]]; then
            echo "Warning: Go version mismatch between Dockerfile ($GO_VERSION_DOCKERFILE) and go.mod ($GO_VERSION_GOMOD)"
          fi

          echo "GOTOOLCHAIN environment variable is set to: $GOTOOLCHAIN"
        env:
          GOTOOLCHAIN: auto

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_PAT || secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
          GOTOOLCHAIN: auto
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GOTOOLCHAIN=auto
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set package visibility to public
        if: env.PACKAGE_PUBLIC == 'true' && github.event_name != 'pull_request'
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

          # Extract the package name from the image name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
          echo "Setting package $REPO_NAME visibility to public"

          # Authenticate with GitHub CLI using the PAT
          echo "${{ secrets.PACKAGE_PAT }}" | gh auth login --with-token

          # Check if the package already exists and is public
          echo "Checking if package is already public..."
          if gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/$REPO_NAME 2>/dev/null | grep -q '"visibility":"public"'; then
            echo "Package is already public, no need to change visibility"
            exit 0
          fi

          # Set the package visibility to public (try user endpoint first)
          echo "Trying user endpoint..."
          if gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/$REPO_NAME \
            -f visibility=public; then
            echo "Successfully set package visibility to public via user endpoint"
          else
            # If user endpoint fails, try organization endpoint
            echo "User endpoint failed, trying organization endpoint..."
            REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            if gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/$REPO_OWNER/packages/container/$REPO_NAME \
              -f visibility=public; then
              echo "Successfully set package visibility to public via organization endpoint"
            else
              echo "Failed to set package visibility to public via API"
              echo "::warning::Could not automatically set package visibility to public. Please do it manually:"
              echo "::warning::1. Go to https://github.com/${{ github.repository }}/pkgs/container/$REPO_NAME"
              echo "::warning::2. Click on Package settings"
              echo "::warning::3. Under 'Danger Zone', click 'Change visibility'"
              echo "::warning::4. Select 'Public' and confirm"
            fi
          fi
