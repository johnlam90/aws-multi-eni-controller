# Recommended NodeENI Sample Improvements
# Based on comprehensive compatibility analysis

# 1. STANDARDIZED MTU CONFIGURATION
# Fix: Use consistent MTU value of 9000 for jumbo frames
---
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-with-standard-mtu
spec:
  nodeSelector:
    ng: multi-eni
  subnetID: subnet-0123456789abcdef0
  securityGroupIDs:
  - sg-0123456789abcdef0
  deviceIndex: 1
  deleteOnTermination: true
  description: "Example ENI with standardized MTU for jumbo frames"
  mtu: 9000  # Standardized value instead of 9001

---
# 2. ENHANCED SR-IOV RESOURCE NAMING
# Fix: Consistent resource naming convention
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: sriov-dpdk-standardized
spec:
  nodeSelector:
    ng: multi-eni
  subnetIDs:
  - subnet-08c2ddc07218f1105
  securityGroupIDs:
  - sg-0e4680d35b5053f29
  deviceIndex: 2
  deleteOnTermination: true
  description: "SR-IOV DPDK with standardized resource naming"
  mtu: 9000
  enableDPDK: true
  dpdkDriver: vfio-pci
  # Standardized naming: vendor.domain/technology_purpose_index
  dpdkResourceName: intel.com/sriov_dpdk_1
  dpdkPCIAddress: "0000:00:07.0"

---
# 3. VALIDATION ERROR EXAMPLE (for documentation)
# This configuration intentionally shows common mistakes
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: invalid-config-example
  annotations:
    example.com/purpose: "documentation-only"
    example.com/status: "invalid-configuration"
spec:
  # Missing required nodeSelector - will cause validation error
  # nodeSelector:
  #   ng: multi-eni

  # Invalid PCI address format - will be caught by validation
  dpdkPCIAddress: "invalid-pci-format"

  # Invalid resource name - missing domain
  dpdkResourceName: "sriov_resource"

  # Conflicting subnet specifications
  subnetID: subnet-123
  subnetIDs:
  - subnet-456
  - subnet-789

---
# 4. MULTI-HOMING CONFIGURATION FOR PERFORMANCE
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: production-multi-homing-nodeeni
  labels:
    environment: production
    tier: networking
    multi-homing: "true"
spec:
  nodeSelector:
    node-role.kubernetes.io/worker: ""
    instance-type: c5n.large  # SR-IOV capable instance

  # Multi-subnet configuration for network segmentation
  # Each node will get ONE ENI in EACH subnet (3 ENIs total per node)
  subnetIDs:
  - subnet-frontend-private    # Frontend network segment
  - subnet-backend-private     # Backend network segment
  - subnet-database-private    # Database network segment

  # Production security groups
  securityGroupIDs:
  - sg-production-worker-nodes
  - sg-multi-segment-networking

  deviceIndex: 1  # Base index - will create ENIs at indices 1, 2, 3
  deleteOnTermination: true
  description: "Production multi-homing NodeENI with network segmentation"
  mtu: 9000

  # DPDK only on first ENI (frontend)
  enableDPDK: true
  dpdkDriver: vfio-pci
  dpdkResourceName: intel.com/sriov_dpdk_frontend
  dpdkPCIAddress: "0000:00:06.0"

---
# 5. MONITORING AND OBSERVABILITY CONFIGURATION
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-with-monitoring
  labels:
    monitoring: enabled
    metrics: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  nodeSelector:
    ng: multi-eni
    monitoring: enabled

  subnetID: subnet-monitoring-private
  securityGroupIDs:
  - sg-monitoring-nodes

  deviceIndex: 1
  deleteOnTermination: true
  description: "NodeENI with monitoring and observability features"
  mtu: 9000

---
# 6. DIFFERENT INSTANCE TYPE CONFIGURATIONS
# For c5n.xlarge instances (enhanced networking)
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-c5n-xlarge
spec:
  nodeSelector:
    node.kubernetes.io/instance-type: c5n.xlarge
    networking: enhanced

  subnetIDs:
  - subnet-high-performance-1
  - subnet-high-performance-2

  securityGroupIDs:
  - sg-enhanced-networking

  deviceIndex: 1
  deleteOnTermination: true
  description: "Optimized for c5n.xlarge enhanced networking"
  mtu: 9000

  enableDPDK: true
  dpdkDriver: vfio-pci
  dpdkResourceName: intel.com/sriov_dpdk_c5n
  dpdkPCIAddress: "0000:00:06.0"

---
# 7. KERNEL-MODE SR-IOV WITH CNI INTEGRATION
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: sriov-kernel-cni-integration
spec:
  nodeSelector:
    ng: multi-eni
    cni: multus

  subnetNames:
  - multus-sriov-subnet-1
  - multus-sriov-subnet-2

  securityGroupNames:
  - multus-sriov-security-group

  deviceIndex: 2
  deleteOnTermination: true
  description: "SR-IOV kernel mode for CNI integration"
  mtu: 9000

  # Kernel mode SR-IOV (no DPDK binding)
  enableDPDK: false
  dpdkResourceName: intel.com/sriov_kernel_cni
  dpdkPCIAddress: "0000:00:07.0"

---
# 8. DISASTER RECOVERY CONFIGURATION
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-disaster-recovery
  labels:
    disaster-recovery: enabled
    backup-region: us-west-2
spec:
  nodeSelector:
    disaster-recovery: enabled
    node-role.kubernetes.io/worker: ""

  # Cross-AZ configuration for DR
  subnetIDs:
  - subnet-dr-primary
  - subnet-dr-secondary

  securityGroupIDs:
  - sg-disaster-recovery
  - sg-cross-region-replication

  deviceIndex: 1
  deleteOnTermination: false  # Preserve for DR scenarios
  description: "Disaster recovery NodeENI configuration"
  mtu: 9000

---
# 9. DEVELOPMENT AND TESTING CONFIGURATION
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-development
  labels:
    environment: development
    testing: enabled
spec:
  nodeSelector:
    environment: development
    ng: multi-eni

  subnetID: subnet-development-private
  securityGroupIDs:
  - sg-development-nodes
  - sg-testing-access

  deviceIndex: 1
  deleteOnTermination: true
  description: "Development and testing NodeENI"
  mtu: 1500  # Standard MTU for development

  # Optional DPDK for testing
  enableDPDK: false
  dpdkResourceName: intel.com/sriov_dev_test
  dpdkPCIAddress: "0000:00:08.0"

---
# 10. PERFORMANCE OPTIMIZATION CONFIGURATION
apiVersion: networking.k8s.aws/v1alpha1
kind: NodeENI
metadata:
  name: nodeeni-performance-optimized
  labels:
    performance: high
    workload: compute-intensive
spec:
  nodeSelector:
    performance: high
    instance-family: c5n

  subnetIDs:
  - subnet-performance-optimized

  securityGroupIDs:
  - sg-high-performance-compute

  deviceIndex: 1
  deleteOnTermination: true
  description: "Performance-optimized NodeENI for compute workloads"
  mtu: 9000

  enableDPDK: true
  dpdkDriver: vfio-pci
  dpdkResourceName: intel.com/sriov_dpdk_performance
  dpdkPCIAddress: "0000:00:06.0"
